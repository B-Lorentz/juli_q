from sympy import *
from sympy.physics.quantum.spin import CG
import numpy as np
def checky(a, b):
    print(a, float(b), np.allclose(a, float(b)) )
checky(4.082482899999999999999999999999999999999999999999999999999999999999999999999984e-01, CG(  S(1)/S(1) ,  S(1)/S(1) ,  S(3)/S(2) ,  S(-1)/S(2) ,  S(1)/S(2) ,  S(1)/S(2) ).doit().evalf())
checky(1.0, CG(  S(0)/S(1) ,  S(0)/S(1) ,  S(1)/S(1) ,  S(1)/S(1) ,  S(1)/S(1) ,  S(1)/S(1) ).doit().evalf())
checky(7.453559919999999999999999999999999999999999999999999999999999999999999999999991e-01, CG(  S(2)/S(1) ,  S(-1)/S(1) ,  S(5)/S(2) ,  S(-5)/S(2) ,  S(7)/S(2) ,  S(-7)/S(2) ).doit().evalf())
checky(2.644429429999999999999999999999999999999999999999999999999999999999999999999982e-01, CG(  S(9)/S(2) ,  S(-3)/S(2) ,  S(3)/S(1) ,  S(-3)/S(1) ,  S(9)/S(2) ,  S(-9)/S(2) ).doit().evalf())
checky(0.0, CG(  S(0)/S(1) ,  S(0)/S(1) ,  S(7)/S(2) ,  S(-1)/S(2) ,  S(1)/S(2) ,  S(-1)/S(2) ).doit().evalf())
checky(-4.670993660000000000000000000000000000000000000000000000000000000000000000000007e-01, CG(  S(3)/S(2) ,  S(1)/S(2) ,  S(5)/S(1) ,  S(-4)/S(1) ,  S(7)/S(2) ,  S(-7)/S(2) ).doit().evalf())
checky(9.486832979999999999999999999999999999999999999999999999999999999999999999999997e-01, CG(  S(1)/S(2) ,  S(1)/S(2) ,  S(9)/S(2) ,  S(7)/S(2) ,  S(5)/S(1) ,  S(4)/S(1) ).doit().evalf())
checky(1.442654529999999999999999999999999999999999999999999999999999999999999999999992e-01, CG(  S(7)/S(2) ,  S(5)/S(2) ,  S(4)/S(1) ,  S(-1)/S(1) ,  S(9)/S(2) ,  S(3)/S(2) ).doit().evalf())
checky(-4.264014330000000000000000000000000000000000000000000000000000000000000000000001e-01, CG(  S(5)/S(1) ,  S(3)/S(1) ,  S(1)/S(2) ,  S(1)/S(2) ,  S(9)/S(2) ,  S(7)/S(2) ).doit().evalf())
checky(1.0, CG(  S(5)/S(2) ,  S(3)/S(2) ,  S(0)/S(1) ,  S(0)/S(1) ,  S(5)/S(2) ,  S(3)/S(2) ).doit().evalf())
checky(-5.370861560000000000000000000000000000000000000000000000000000000000000000000009e-01, CG(  S(7)/S(2) ,  S(5)/S(2) ,  S(9)/S(2) ,  S(5)/S(2) ,  S(5)/S(1) ,  S(5)/S(1) ).doit().evalf())
checky(-6.257862189999999999999999999999999999999999999999999999999999999999999999999967e-01, CG(  S(3)/S(1) ,  S(-1)/S(1) ,  S(9)/S(2) ,  S(9)/S(2) ,  S(9)/S(2) ,  S(7)/S(2) ).doit().evalf())
checky(1.0, CG(  S(0)/S(1) ,  S(0)/S(1) ,  S(0)/S(1) ,  S(0)/S(1) ,  S(0)/S(1) ,  S(0)/S(1) ).doit().evalf())
checky(-6.030226890000000000000000000000000000000000000000000000000000000000000000000017e-01, CG(  S(2)/S(1) ,  S(-2)/S(1) ,  S(7)/S(2) ,  S(-5)/S(2) ,  S(9)/S(2) ,  S(-9)/S(2) ).doit().evalf())
checky(2.791452629999999999999999999999999999999999999999999999999999999999999999999997e-01, CG(  S(7)/S(2) ,  S(1)/S(2) ,  S(9)/S(2) ,  S(7)/S(2) ,  S(6)/S(1) ,  S(4)/S(1) ).doit().evalf())
checky(1.166666667000000000000000000000000000000000000000000000000000000000000000000008, CG(  S(3)/S(2) ,  S(-3)/S(2) ,  S(9)/S(2) ,  S(-7)/S(2) ,  S(5)/S(1) ,  S(-5)/S(1) ).doit().evalf())
checky(-8.174238910000000000000000000000000000000000000000000000000000000000000000000007e-01, CG(  S(9)/S(2) ,  S(3)/S(2) ,  S(7)/S(2) ,  S(-5)/S(2) ,  S(3)/S(1) ,  S(-1)/S(1) ).doit().evalf())
checky(5.175491699999999999999999999999999999999999999999999999999999999999999999999976e-01, CG(  S(5)/S(2) ,  S(3)/S(2) ,  S(3)/S(2) ,  S(-1)/S(2) ,  S(4)/S(1) ,  S(1)/S(1) ).doit().evalf())
checky(-6.454972240000000000000000000000000000000000000000000000000000000000000000000017e-01, CG(  S(3)/S(1) ,  S(2)/S(1) ,  S(2)/S(1) ,  S(1)/S(1) ,  S(3)/S(1) ,  S(3)/S(1) ).doit().evalf())
checky(5.0e-01, CG(  S(1)/S(2) ,  S(1)/S(2) ,  S(7)/S(2) ,  S(3)/S(2) ,  S(3)/S(1) ,  S(2)/S(1) ).doit().evalf())
checky(7.385489459999999999999999999999999999999999999999999999999999999999999999999992e-01, CG(  S(3)/S(1) ,  S(-2)/S(1) ,  S(5)/S(2) ,  S(-3)/S(2) ,  S(11)/S(2) ,  S(-7)/S(2) ).doit().evalf())
checky(0.0, CG(  S(5)/S(2) ,  S(1)/S(2) ,  S(0)/S(1) ,  S(0)/S(1) ,  S(3)/S(2) ,  S(1)/S(2) ).doit().evalf())
checky(-6.900655590000000000000000000000000000000000000000000000000000000000000000000008e-01, CG(  S(1)/S(1) ,  S(-1)/S(1) ,  S(7)/S(2) ,  S(-1)/S(2) ,  S(7)/S(2) ,  S(-3)/S(2) ).doit().evalf())
checky(8.944271910000000000000000000000000000000000000000000000000000000000000000000017e-01, CG(  S(1)/S(1) ,  S(1)/S(1) ,  S(4)/S(1) ,  S(3)/S(1) ,  S(5)/S(1) ,  S(4)/S(1) ).doit().evalf())
checky(8.164965810000000000000000000000000000000000000000000000000000000000000000000043e-01, CG(  S(5)/S(2) ,  S(-1)/S(2) ,  S(1)/S(2) ,  S(-1)/S(2) ,  S(3)/S(1) ,  S(-1)/S(1) ).doit().evalf())
checky(0.0, CG(  S(7)/S(2) ,  S(3)/S(2) ,  S(3)/S(1) ,  S(-1)/S(1) ,  S(3)/S(2) ,  S(1)/S(2) ).doit().evalf())
checky(-4.507489359999999999999999999999999999999999999999999999999999999999999999999981e-01, CG(  S(5)/S(2) ,  S(-3)/S(2) ,  S(2)/S(1) ,  S(2)/S(1) ,  S(7)/S(2) ,  S(1)/S(2) ).doit().evalf())
checky(7.071067810000000000000000000000000000000000000000000000000000000000000000000014e-01, CG(  S(1)/S(1) ,  S(-1)/S(1) ,  S(3)/S(2) ,  S(3)/S(2) ,  S(1)/S(2) ,  S(1)/S(2) ).doit().evalf())
checky(0.0, CG(  S(3)/S(2) ,  S(1)/S(2) ,  S(7)/S(2) ,  S(1)/S(2) ,  S(1)/S(1) ,  S(1)/S(1) ).doit().evalf())
checky(6.324555320000000000000000000000000000000000000000000000000000000000000000000027e-01, CG(  S(1)/S(1) ,  S(1)/S(1) ,  S(5)/S(2) ,  S(-3)/S(2) ,  S(3)/S(2) ,  S(-1)/S(2) ).doit().evalf())
checky(1.0, CG(  S(0)/S(1) ,  S(0)/S(1) ,  S(2)/S(1) ,  S(2)/S(1) ,  S(2)/S(1) ,  S(2)/S(1) ).doit().evalf())
